<?php

/**
 * @file
 * noty Messages
 * A noty based override of Drupal's core message system
 */

/**
 * Define Default Values
 */
define('NOTY_LAYOUT', 'layout_top_center');
define('NOTY_TEXT_ALIGN', 'text_center');
define('NOTY_SPEED', 500);
define('NOTY_TIMEOUT', 5000);
define('NOTY_CLOSABLE', TRUE);
define('NOTY_CLICK_CLOSE', TRUE);
define('NOTY_MODAL', FALSE);
define('NOTY_ADMIN_PATH', FALSE);
define('NOTY_TYPE', 'success');
define('NOTY_IS_NOTY', FALSE);
define('NOTY_USE_GLOBAL', TRUE);

/**
 * Implements hook_permission().
 */
function noty_messages_permission() {
  return array(
    'view noty messages' => array(
      'title' => 'View noty messages',
    ),
    'administer noty messages' => array(
      'title' => 'Administer noty messages',
    ),
  );
}

/**
 * Implements hook_help().
 */
function noty_messages_help($path, $arg) {
  if ($path == 'admin/settings/noty') {
    return t('Set your options and decide whether you want the noty styled messages
      to appear on admin pages or not.');
  }
}

/**
 * Implements hook_menu().
 */
function noty_messages_menu() {
  $items = array();
  $items['notytesting'] = array(
    'title' => 'Configure noty Messages',
    'description' => 'Settings to control the noty messages output.',
    'page callback' => 'notytesting',
    'page arguments' => array(TRUE),
    'access callback' => 'user_access',
    'access arguments' => array('administer noty messages'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/user-interface/noty-messages'] = array(
    'title' => 'Configure noty Messages',
    'description' => 'Settings to control noty messages',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('noty_messages_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer noty messages'),
    'file' => 'noty_messages.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

function notytesting($something) {
  global $user;
  drupal_set_message(t('status message'), 'status');
  drupal_set_message(t('warning message'), 'warning');
  drupal_set_message(t('error message'), 'error');
  dsm($user);
  return 'testing messages';
}
/**
 * Implements hook_theme().
 */
function noty_messages_theme($existing, $type, $theme, $path) {
  return array(
    'original_status_messages' => array(
      'variables' => array('type' => NULL, 'messages' => NULL),
    )
  );
}

/**
 * Implements hook_theme_registry_alter().
 *
 */
function noty_messages_theme_registry_alter(&$theme_registry) {
  $theme_registry['status_messages']['function'] = 'noty_messages_status_messages';
}


/**
 * Checks for the existence of devel code and returns boolean whether devel code xists
 *
 * @param $messages
 *   An array, each containing a message.
 *
 * @return
 *   Boolean.
 */
function _noty_messages_devel_check($message) {
  if (strstr($message, '<pre>') || strstr($message, '<textarea') ||
    strstr($message, 'krumo')) {
    // Devel message found.
    return TRUE;
  }
  else{
    return FALSE;
  }
}

/**
 * Checks to see whether the custom files exist.
 *
 * Checks current theme for custom CSS. Also returns the correct path
 * depending on where the function has been called from.
 *
 * @param $themelayer
 *   (optional) Boolean determines where function has been called from.
 *
 * @return
 *    A string containing the path to the custom css or default one.
 */
function noty_messages_get_css($themelayer = FALSE) {
  if ($themelayer == TRUE) {
    // Called from theme function so path_to_theme returns incorrect result.
    global $theme;
    $custom_css = drupal_get_path('theme', $theme) . '/notycss/noty.css';
  }
  else {
    // Called from non theme function (admin).
    $custom_css = path_to_theme() . '/notycss/noty.css';
  }
  if (!is_file($custom_css)) {
    return FALSE;
  }
  return $custom_css;
}

/*determines if a regular message should be returned or a noty message*/
//returns TRUE/FALSE
function noty_messages_type($type, $messages) {
  //assume TRUE
  $is_noty = TRUE;
  // check for lib path existence
  if (!libraries_get_path('noty')) {
    return FALSE;
  }
  // check type visibility
  $active_types = variable_get('noty_messages_is_noty', _noty_messages_set_default(array($type), NOTY_IS_NOTY));
  if (empty($active_types[$type])) {
    return FALSE;
  }
  // should the messages be shown on admin paths?
  if (path_is_admin(current_path())) {
    $admin_path_settings = variable_get('noty_messages_admin_path', _noty_messages_set_default(array($type), NOTY_ADMIN_PATH));
    if (empty($admin_path_settings[$type])) {
      return FALSE;
    }
  }
  // if no other conditions have return FALSE by now, show type
  return $is_noty;
}

// sets all the theme layer settings for the message
function noty_messages_messages_setup($noties) {
  $module_path = drupal_get_path('module', 'noty_messages');
  $lib_path = libraries_get_path('noty');
  drupal_add_js($module_path . '/js/promise.js');
  drupal_add_js($lib_path . '/js/jquery.noty.js');
  drupal_add_css($lib_path . '/css/jquery.noty.css');
  $custom_css = noty_messages_get_css($themelayer = TRUE);
  if (!empty($custom_css)) {
    drupal_add_css($custom_css);
  }
  $js_settings = array();
  $trimmed_types = drupal_map_assoc(array('status', 'warning', 'error')); // maybe use $noties var here
  $config = _noty_messages_get_config_keys($trimmed_types, TRUE, 'js');
  foreach ($config as $key => $value) {
    // do some string replacement so js is nice
    $js_settings['noty' . $key] = $value;
  }
  drupal_add_js(array('notyMessages' => $js_settings), 'setting');
  $jq_inline = array(
    'open'=> '(function($) { Drupal.behaviors.noty_messages = { attach: function(context) {',
    'close' => '}}})(jQuery);',
  );
  return $jq_inline;
}

function noty_messages_build_messages($type, $messages) {
  $noties_of_type = array();
  $noty_js_settings = 'Drupal.settings.notyMessages';
  $noty_template =
  'noty({
    layout: @layout,
    type: @type,
    text:"@noty_text",
    textAlign: @text_align,
    speed: @speed,
    timeout: @timeout,
    closable: @closable,
    closeOnSelfClick: @click_close,
    modal: @modal
  });';
  //@todo get config for this
  $replacements = array(
    '@layout' => $noty_js_settings . '.notyLayout.' . $type,
    '@type' => $noty_js_settings . '.notyType.' . $type,
    '@text_align' => $noty_js_settings . '.notyTextAlign.' . $type,
    '@speed' => $noty_js_settings . '.notySpeed.' . $type,
    "@timeout" => $noty_js_settings . '.notyTimeout.' . $type,
    "@closable" => $noty_js_settings . '.notyClosable.' . $type,
    "@click_close" => $noty_js_settings . '.notyClickClose.' . $type,
    "@modal" => $noty_js_settings . '.notyModal.' . $type,
  );
    foreach ($messages as $key => $message) {
      if (_noty_messages_devel_check($message)) {
        $noties_of_type['devels'][$key] = $message;
      }
      else{
        $replacements['@noty_text'] = $message;
        $noties_of_type['noties'][$key] = format_string($noty_template, $replacements);
      }
    }
    return $noties_of_type;
}

/*main function for messages*/
//determines which message to set, prepares and returns
//callback from theme_registry alter
function noty_messages_status_messages($variables) {
  $display = $variables['display'];
  $output = '';
  $noties = array();
  $originals = array();
  $devels = array();
  $noty_out = '';
  $originals_out = '';
  $devels_out = '';
  $displayed_messages = drupal_get_messages($display);

  foreach ($displayed_messages as $type => $messages) {
    if (noty_messages_type($type, $messages)) {
      $noties[$type] = noty_messages_build_messages($type, $messages);
      if (!empty($noties[$type]['devels'])) {
        $devels[$type] = $noties[$type]['devels'];
      }
      //wipe out the devels and move the array one level up
      $noties[$type] = implode(' ', $noties[$type]['noties']);
    }
    else{
      //$originals_out .= theme('original_status_messages', array('type' => $type, 'messages' => $messages));
      $originals[$type] = $messages;
    }
  }
  //render noties first
  $noties = array_filter($noties);
  $originals = array_filter($originals);
  $devels = array_filter($devels);
  if (!empty($noties)) {
    $jq_inline = noty_messages_messages_setup($noties);
    $noty_out = '<script type = "text/javascript">' . $jq_inline['open'] . implode(' ', $noties) . $jq_inline['close'] . '</script>';
  }
  if (!empty($originals)) {
    foreach ($originals as $type => $messages) {
      $originals_out .= theme('original_status_messages', array('type' => $type, 'messages' => $messages));
    }
  }
  if (!empty($devels)) {
    foreach ($devels as $type => $messages) {
      $devels_out .= implode(' ', $messages);
    }
  }
  $output = $noty_out . $originals_out . $devels_out;
  return $output;
}

/**
 * Return a themed set of status and/or error messages. The messages are grouped
 * by type.
 *
 * This is the original output which we use if noty messages is turned off.
 *
 * @param $type
 *   String containing a message type. Used to set the class on the message div.
 *
 * @param $messages
 *   An array, each containing a message.
 *
 * @return
 *   A string containing the formatted messages.
 */
function theme_original_status_messages($vars) {
  $type = $vars['type'];
  $messages = $vars['messages'];
  $output = '';
  $output .= "<div class=\"messages $type\">\n";
  if (count($messages) > 1) {
    $output .= " <ul>\n";
    foreach ($messages as $message) {
      $output .= '  <li>' . $message . "</li>\n";
    }
    $output .= " </ul>\n";
  }
  else {
    $output .= $messages[0];
  }
  $output .= "</div>\n";
  return $output;
}


function _noty_messages_set_default($message_types, $value) {
  $return = array();
  if (is_array($value)) {
    return $value;
  }
  foreach ($message_types as $message_type) {
    $return[$message_type] = $value;
  }
  return $return;
}

function _noty_messages_get_config_keys($message_types = NULL, $with_values = FALSE, $set = 'all') {
  if ($set == 'js') {
    $config_keys = array(
      'Layout' => '',
      'TextAlign' => '',
      'Speed' => '',
      'Timeout' => '',
      'Closable' => '',
      'ClickClose' => '',
      'Modal' => '',
      'Type' => '',
    );
    return $config_keys;
  }
  $config_keys = array(
    'layout' => '',
    'text_align' => '',
    'speed' => '',
    'timeout' =>  '',
    'closable' =>  '',
    'click_close' =>  '',
    'modal' =>  '',
    'admin_path' =>  '',
    'type' =>  '',
  );
  // if set is js, only the above
  if ($set == 'single' || $set == 'all') {
    $config_keys['use_global'] =  '';
  }
  if ($set == 'global' || $set == 'all') {
    $config_keys['is_noty'] = '';
  }
  if ($with_values == FALSE) {
    return $config_keys;
  }
  foreach ($config_keys as $key => $value) {
    $config_keys[$key] = variable_get('noty_messages_' . $key, _noty_messages_set_default($message_types, constant(strtoupper('noty_' . $key))));
  }
  return $config_keys;
}