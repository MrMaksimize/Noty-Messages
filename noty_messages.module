<?php

/**
 * @file
 * noty Messages
 * A noty based override of Drupal's core message system
 */

/**
 * Define Default Values
 */
define('NOTY_LAYOUT', 'layout_top_center');
define('NOTY_TEXT', 'text_center');
define('NOTY_SPEED', 500);
define('NOTY_TIMEOUT', 5000);
define('NOTY_CLOSABLE', TRUE);
define('NOTY_CLICK_CLOSE', TRUE);
define('NOTY_MODAL', FALSE);
define('NOTY_MODAL_CSS', '');
define('NOTY_ON_ADMIN', FALSE);
/**
 * Implements hook_permission().
 */
function noty_messages_permission() {
  return array(
    'view noty messages' => array(
      'title' => 'View noty messages',
    ),
    'administer noty messages' => array(
      'title' => 'Administer noty messages',
    ),
  );
}

/**
 * Implements hook_help().
 */
function noty_messages_help($path, $arg) {
  if ($path == 'admin/settings/noty') {
    return t('Set your options and decide whether you want the noty styled messages
      to appear on admin pages or not.');
  }
}

/**
 * Implements hook_menu().
 */
function noty_messages_menu() {
  $items = array();
  $items['notytesting'] = array(
    'title' => 'Configure noty Messages',
    'description' => 'Settings to control the noty messages output.',
    'page callback' => 'notytesting',
    'page arguments' => array(TRUE),
    'access callback' => 'user_access',
    'access arguments' => array('administer noty messages'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/user-interface/noty-messages'] = array(
    'title' => 'Configure noty Messages',
    'description' => 'Settings to control noty messages',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('noty_messages_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer noty messages'),
    'file' => 'noty_messages.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

function notytesting($something){
  drupal_set_message('poop');
  drupal_set_message('poop2');
  return 'testing messages';
}
/**
 * Implements hook_theme().
 */
function noty_messages_theme($existing, $type, $theme, $path) {
  return array(
    'original_status_messages' => array(
      'variables' => array('type' => NULL, 'messages' => NULL),
    )
  );
}

/**
 * Implements hook_theme_registry_alter().
 *
 */
function noty_messages_theme_registry_alter(&$theme_registry) {
  $theme_registry['status_messages']['function'] = 'noty_messages_status_messages';
}


/**
 * Checks for the existence of devel code and returns boolean whether devel code xists
 *
 * @param $messages
 *   An array, each containing a message.
 *
 * @return
 *   Boolean.
 */
function _noty_messages_devel_check($messages) {
  foreach ($messages as $message) {
    if (strstr($message, '<pre>') || strstr($message, '<textarea') ||
      strstr($message, 'krumo')) {
      // Devel message found.
      return FALSE;
    }
  }
  // No devel messages.
  return TRUE;
}

/**
 * Checks to see whether the custom files exist.
 *
 * Checks current theme for custom CSS. Also returns the correct path
 * depending on where the function has been called from.
 *
 * @param $themelayer
 *   (optional) Boolean determines where function has been called from.
 *
 * @return
 *    A string containing the path to the custom css or default one.
 */
function noty_messages_get_css($themelayer = FALSE) {
  if ($themelayer == TRUE) {
    // Called from theme function so path_to_theme returns incorrect result.
    global $theme;
    $custom_css = drupal_get_path('theme', $theme) . '/notycss/noty.css';
  }
  else {
    // Called from non theme function (admin).
    $custom_css = path_to_theme() . '/notycss/noty.css';
  }
  if (!is_file($custom_css)) {
    return FALSE;
  }
  return $custom_css;
}

/*determines if a regular message should be returned or a noty message*/
//returns TRUE/FALSE
function noty_messages_type($type, $messages){
  //assume TRUE
  $is_noty = TRUE;
  // check for lib path existence
  if (!libraries_get_path('noty')) {
    return FALSE;
  }
  // check type visibility
  $active_types = variable_get('noty_messages_is_noty', FALSE);
  if (empty($active_types[$type])){
    return FALSE;
  }
  // should the messages be shown on admin paths?
  if (path_is_admin(current_path())){
    $admin_path_settings = variable_get('noty_messages_admin_path', NOTY_ON_ADMIN);
    if (empty($admin_path_settings[$type])){
      return FALSE;
    }
  }
  // if no other conditions have return FALSE by now, show type
  return $is_noty;
}

// sets all the theme layer settings for the message
function noty_messages_messages_setup($noties){
  $module_path = drupal_get_path('module', 'noty_messages');
  $lib_path = libraries_get_path('noty');
   drupal_add_js($module_path . '/js/promise.js');
  drupal_add_js($lib_path . '/js/jquery.noty.js');
  drupal_add_css($lib_path . '/css/jquery.noty.css');
  $custom_css = noty_messages_get_css($themelayer = TRUE);
  if (!empty($custom_css)) {
    drupal_add_css($custom_css);
  }
  drupal_add_js(array('notyMessages' => array(
    'notyLayout' => variable_get('noty_messages_position', NOTY_POSITION),
    'notyTextAlign' => variable_get('noty_messages_text_alignment', NOTY_TEXT),
    'notySpeed' => variable_get('noty_messages_speed', NOTY_SPEED),
    'notyTimeout' => variable_get('noty_messages_timeout', NOTY_TIMEOUT),
    'notyClosable' => variable_get('noty_messages_closable', NOTY_CLOSABLE),
    'notyClickClose' => variable_get('noty_messages_click_to_close', NOTY_CLICK_TO_CLOSE),
    'notyModal' => variable_get('noty_messages_modal', NOTY_MODAL),
  )), 'setting');
  //set up the opening and closing jquery
  $jq_inline = array(
    'open'=> '(function($) {Drupal.behaviors.noty_messages = { attach: function(context) {',
    'close' => '}}})(jQuery);',
  );
  return $jq_inline;
}

function noty_messages_build_messages($type, $messages){
  $noties_of_type = array();
  $noty_js_settings = 'Drupal.settings.notyMessages';
  $noty_template =
  'noty({
    layout: @position,
    text:"@noty_text",
    textAlign: @text_align,
    speed: @speed,
    timeout: @timeout,
    closable: @closable,
    closeOnSelfClick: @click_close
  });';
  $replacements = array(
    '@position' => $noty_js_settings . '.notyPosition' . $type,
    '@text_align' => $noty_js_settings . '.notyTextAlign' . $type,
    '@speed' => $noty_js_settings . '.notySpeed' . $type,
    "@timeout" => $noty_js_settings . '.notyTimeOut' . $type,
    "@closable" => $noty_js_settings . '.notyClosable' . $type,
    "@click_close" => $noty_js_settings . '.notyClickToClose' . $type,
  );
    foreach($messages as $key => $message){
      $replacements['@noty_text'] = $message;
      $noties_of_type[$key] = format_string($noty_template, $replacements);
    }
    return $noties_of_type;
}

/*main function for messages*/
//determines which message to set, prepares and returns
//callback from theme_registry alter
function noty_messages_status_messages($variables){
  $display = $variables['display'];
  $output = '';
  $noties = array();
  $noty_messages = '';
  foreach(drupal_get_messages($display) as $type => $messages){
    if (noty_messages_type($type, $messages)){
      $noties[$type] = noty_messages_build_messages($type, $messages);
    }
    else{
      $output .= theme('original_status_messages', array('type' => $type, 'messages' => $messages));
    }
  }
  if (!empty($noties)){
    $noty_out = '';
    $jq_inline = noty_messages_messages_setup($noties);
    foreach ($noties as $type => $messages){
      $noty_out .= implode(' ', $messages);
    }
    $output = '<script type = "text/javascript">' . $jq_inline['open'] . $noty_out . $jq_inline['close'] . '</script>';
  }
  return $output;
}

/**
 * Return a themed set of status and/or error messages. The messages are grouped
 * by type.
 *
 * This is the original output which we use if noty messages is turned off.
 *
 * @param $type
 *   String containing a message type. Used to set the class on the message div.
 *
 * @param $messages
 *   An array, each containing a message.
 *
 * @return
 *   A string containing the formatted messages.
 */
function theme_original_status_messages($vars) {
  $type = $vars['type'];
  $messages = $vars['messages'];
  $output = '';
  $output .= "<div class=\"messages $type\">\n";
  if (count($messages) > 1) {
    $output .= " <ul>\n";
    foreach ($messages as $message) {
      $output .= '  <li>' . $message . "</li>\n";
    }
    $output .= " </ul>\n";
  }
  else {
    $output .= $messages[0];
  }
  $output .= "</div>\n";
  return $output;
}